Gitのデータ構造（データの流れ）は？
0. text.txtを作成
1. text.txtをステージにaddすると、text.txtのハッシュ暗号化された圧縮ファイルAをリポジトリに作成
2. インデックスというファイルに「text.txtの圧縮されたファイルはファイルAだ」とう情報を追加する（ここまでがgit add）
3. コミットをするとインデックスのファイル構成をもとに、ツリー１というファイルが作られる。この中身はインデックスと同じ。
4. コミット１というファイルを作る。ここにはツリー１や作成者名、日付やコミットメッセージを補完する。ここまでが(git commit)

０から4までの作業をすると、ローカルリポジトリには以下の3つのファイルが存在する。
圧縮ファイルA：text.txtの情報を持つ
ツリー１（インデックスと同じ情報を反映）：text.txtの情報が圧縮ファイルAに存在するという情報を持つ
コミット１：ツリー１や作成者などの情報を持つ


では、ファイルを追加してコミットするときのデータの流れは？
0.text.txtの存在するフォルダにcss/home.cssを新規作成する
1.圧縮ファイルBにhome.cssを圧縮して保存
2.インデックスに「css/home.cssが圧縮ファイルBであると」書き込まれる（このインデックスは前のと同じ）
3.コミットするとツリー２にインデックスの情報が入る（つまりtext.txtが圧縮ファイルAであることもツリー２には書き込まれる）
4.コミット２というファイルと作る。コミット２にはツリー２の名前と親コミットがコミット１であることが書き込まれる。


では、ファイルを変更してコミットするときのデータの流れは？
0.text.txtの中身を書き換える
1.圧縮ファイルCにtext.cssを圧縮して保存
2.インデックスの「text.txtが圧縮ファイルAである」という情報を「text.txtが圧縮ファイルCである」に上書きする
3.コミットするとツリー３にインデックスの情報が入る
4.コミット３というファイルと作る。コミット３にはツリー３の名前と親コミットがコミット２であることが書き込まれる。


以上の工程を経たファイルの中身は？
圧縮ファイルA：text.txt(変更前)
圧縮ファイルB：home.css
圧縮ファイルC：text.txt(変更後)

インデックス：圧縮ファイルC＝text.txt(変更後)、圧縮ファイルB＝css/home.css

ツリー１：圧縮ファイルA＝text.txt(変更前)
ツリー２：圧縮ファイルA＝text.txt(変更前)、圧縮ファイルB＝css/home.css
ツリー３：圧縮ファイルC＝text.txt(変更後)、圧縮ファイルB＝css/home.css

コミット１：作成者、コミット日時、コミットメッセージ、ツリー１
コミット２：作成者、コミット日時、コミットメッセージ、ツリー２、親コミット＝コミット１
コミット３：作成者、コミット日時、コミットメッセージ、ツリー３、親コミット＝コミット２